// Code generated by protoc-gen-go.
// source: batteship.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	batteship.proto

It has these top-level messages:
	Ship
	IdMessage
	EmptyMessage
	ConnectRequest
	Notification
	GameStatus
	PlayRequest
	PlayReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type Tile int32

const (
	Tile_UNKNOWN Tile = 0
	Tile_SEA     Tile = 1
	Tile_SHIP    Tile = 2
	Tile_SUNKEN  Tile = 3
)

var Tile_name = map[int32]string{
	0: "UNKNOWN",
	1: "SEA",
	2: "SHIP",
	3: "SUNKEN",
}
var Tile_value = map[string]int32{
	"UNKNOWN": 0,
	"SEA":     1,
	"SHIP":    2,
	"SUNKEN":  3,
}

func (x Tile) String() string {
	return proto1.EnumName(Tile_name, int32(x))
}
func (Tile) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Whether the client has won or not
type GameStatus_Status int32

const (
	GameStatus_PLAYING GameStatus_Status = 0
	GameStatus_VICTORY GameStatus_Status = 1
	GameStatus_DEFEAT  GameStatus_Status = 2
)

var GameStatus_Status_name = map[int32]string{
	0: "PLAYING",
	1: "VICTORY",
	2: "DEFEAT",
}
var GameStatus_Status_value = map[string]int32{
	"PLAYING": 0,
	"VICTORY": 1,
	"DEFEAT":  2,
}

func (x GameStatus_Status) String() string {
	return proto1.EnumName(GameStatus_Status_name, int32(x))
}
func (GameStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type PlayReply_Status int32

const (
	PlayReply_ACCEPTED         PlayReply_Status = 0
	PlayReply_NOT_YOUR_TURN    PlayReply_Status = 1
	PlayReply_INVALID_POSITION PlayReply_Status = 2
)

var PlayReply_Status_name = map[int32]string{
	0: "ACCEPTED",
	1: "NOT_YOUR_TURN",
	2: "INVALID_POSITION",
}
var PlayReply_Status_value = map[string]int32{
	"ACCEPTED":         0,
	"NOT_YOUR_TURN":    1,
	"INVALID_POSITION": 2,
}

func (x PlayReply_Status) String() string {
	return proto1.EnumName(PlayReply_Status_name, int32(x))
}
func (PlayReply_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type Ship struct {
	Pos  int32 `protobuf:"varint,1,opt,name=pos" json:"pos,omitempty"`
	Vert bool  `protobuf:"varint,2,opt,name=vert" json:"vert,omitempty"`
	Size int32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *Ship) Reset()                    { *m = Ship{} }
func (m *Ship) String() string            { return proto1.CompactTextString(m) }
func (*Ship) ProtoMessage()               {}
func (*Ship) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ---- Common
type IdMessage struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdMessage) Reset()                    { *m = IdMessage{} }
func (m *IdMessage) String() string            { return proto1.CompactTextString(m) }
func (*IdMessage) ProtoMessage()               {}
func (*IdMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto1.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// ---- Connect
type ConnectRequest struct {
	Name  string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ships []*Ship `protobuf:"bytes,2,rep,name=ships" json:"ships,omitempty"`
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto1.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConnectRequest) GetShips() []*Ship {
	if m != nil {
		return m.Ships
	}
	return nil
}

// ---- Notifications
type Notification struct {
	// Types that are valid to be assigned to Body:
	//	*Notification_ConnectReply
	//	*Notification_GameStatus
	Body isNotification_Body `protobuf_oneof:"body"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto1.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isNotification_Body interface {
	isNotification_Body()
}

type Notification_ConnectReply struct {
	ConnectReply *IdMessage `protobuf:"bytes,1,opt,name=connect_reply,json=connectReply,oneof"`
}
type Notification_GameStatus struct {
	GameStatus *GameStatus `protobuf:"bytes,2,opt,name=game_status,json=gameStatus,oneof"`
}

func (*Notification_ConnectReply) isNotification_Body() {}
func (*Notification_GameStatus) isNotification_Body()   {}

func (m *Notification) GetBody() isNotification_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Notification) GetConnectReply() *IdMessage {
	if x, ok := m.GetBody().(*Notification_ConnectReply); ok {
		return x.ConnectReply
	}
	return nil
}

func (m *Notification) GetGameStatus() *GameStatus {
	if x, ok := m.GetBody().(*Notification_GameStatus); ok {
		return x.GameStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Notification) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Notification_OneofMarshaler, _Notification_OneofUnmarshaler, _Notification_OneofSizer, []interface{}{
		(*Notification_ConnectReply)(nil),
		(*Notification_GameStatus)(nil),
	}
}

func _Notification_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Notification)
	// body
	switch x := m.Body.(type) {
	case *Notification_ConnectReply:
		b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.ConnectReply); err != nil {
			return err
		}
	case *Notification_GameStatus:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.GameStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Notification.Body has unexpected type %T", x)
	}
	return nil
}

func _Notification_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Notification)
	switch tag {
	case 1: // body.connect_reply
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(IdMessage)
		err := b.DecodeMessage(msg)
		m.Body = &Notification_ConnectReply{msg}
		return true, err
	case 2: // body.game_status
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(GameStatus)
		err := b.DecodeMessage(msg)
		m.Body = &Notification_GameStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Notification_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Notification)
	// body
	switch x := m.Body.(type) {
	case *Notification_ConnectReply:
		s := proto1.Size(x.ConnectReply)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Notification_GameStatus:
		s := proto1.Size(x.GameStatus)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ---- Game
type GameStatus struct {
	// Whether it is the caller's turn to play or not
	Play   bool              `protobuf:"varint,1,opt,name=play" json:"play,omitempty"`
	Status GameStatus_Status `protobuf:"varint,2,opt,name=status,enum=battleship.GameStatus_Status" json:"status,omitempty"`
}

func (m *GameStatus) Reset()                    { *m = GameStatus{} }
func (m *GameStatus) String() string            { return proto1.CompactTextString(m) }
func (*GameStatus) ProtoMessage()               {}
func (*GameStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// ---- Play
type PlayRequest struct {
	Id       int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Position int32 `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
}

func (m *PlayRequest) Reset()                    { *m = PlayRequest{} }
func (m *PlayRequest) String() string            { return proto1.CompactTextString(m) }
func (*PlayRequest) ProtoMessage()               {}
func (*PlayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type PlayReply struct {
	Tile   Tile             `protobuf:"varint,1,opt,name=tile,enum=battleship.Tile" json:"tile,omitempty"`
	Status PlayReply_Status `protobuf:"varint,2,opt,name=status,enum=battleship.PlayReply_Status" json:"status,omitempty"`
}

func (m *PlayReply) Reset()                    { *m = PlayReply{} }
func (m *PlayReply) String() string            { return proto1.CompactTextString(m) }
func (*PlayReply) ProtoMessage()               {}
func (*PlayReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto1.RegisterType((*Ship)(nil), "battleship.Ship")
	proto1.RegisterType((*IdMessage)(nil), "battleship.IdMessage")
	proto1.RegisterType((*EmptyMessage)(nil), "battleship.EmptyMessage")
	proto1.RegisterType((*ConnectRequest)(nil), "battleship.ConnectRequest")
	proto1.RegisterType((*Notification)(nil), "battleship.Notification")
	proto1.RegisterType((*GameStatus)(nil), "battleship.GameStatus")
	proto1.RegisterType((*PlayRequest)(nil), "battleship.PlayRequest")
	proto1.RegisterType((*PlayReply)(nil), "battleship.PlayReply")
	proto1.RegisterEnum("battleship.Tile", Tile_name, Tile_value)
	proto1.RegisterEnum("battleship.GameStatus_Status", GameStatus_Status_name, GameStatus_Status_value)
	proto1.RegisterEnum("battleship.PlayReply_Status", PlayReply_Status_name, PlayReply_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Battleship service

type BattleshipClient interface {
	// Connects to the server to get an id to use in other messages
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Battleship_ConnectClient, error)
	// Disconnect from the server
	Disconnect(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Play
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayReply, error)
}

type battleshipClient struct {
	cc *grpc.ClientConn
}

func NewBattleshipClient(cc *grpc.ClientConn) BattleshipClient {
	return &battleshipClient{cc}
}

func (c *battleshipClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Battleship_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Battleship_serviceDesc.Streams[0], c.cc, "/battleship.Battleship/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &battleshipConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Battleship_ConnectClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type battleshipConnectClient struct {
	grpc.ClientStream
}

func (x *battleshipConnectClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *battleshipClient) Disconnect(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/battleship.Battleship/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *battleshipClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayReply, error) {
	out := new(PlayReply)
	err := grpc.Invoke(ctx, "/battleship.Battleship/Play", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Battleship service

type BattleshipServer interface {
	// Connects to the server to get an id to use in other messages
	Connect(*ConnectRequest, Battleship_ConnectServer) error
	// Disconnect from the server
	Disconnect(context.Context, *IdMessage) (*EmptyMessage, error)
	// Play
	Play(context.Context, *PlayRequest) (*PlayReply, error)
}

func RegisterBattleshipServer(s *grpc.Server, srv BattleshipServer) {
	s.RegisterService(&_Battleship_serviceDesc, srv)
}

func _Battleship_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BattleshipServer).Connect(m, &battleshipConnectServer{stream})
}

type Battleship_ConnectServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type battleshipConnectServer struct {
	grpc.ServerStream
}

func (x *battleshipConnectServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Battleship_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BattleshipServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/battleship.Battleship/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BattleshipServer).Disconnect(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Battleship_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BattleshipServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/battleship.Battleship/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BattleshipServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Battleship_serviceDesc = grpc.ServiceDesc{
	ServiceName: "battleship.Battleship",
	HandlerType: (*BattleshipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disconnect",
			Handler:    _Battleship_Disconnect_Handler,
		},
		{
			MethodName: "Play",
			Handler:    _Battleship_Play_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Battleship_Connect_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x53, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xa6, 0x50, 0x7e, 0xf6, 0xc0, 0x62, 0x9d, 0xb8, 0x4a, 0x50, 0x13, 0x33, 0x31, 0x66, 0xe3,
	0x05, 0x31, 0x55, 0x13, 0x4d, 0x4c, 0x56, 0x7e, 0xea, 0x6e, 0x23, 0xb6, 0x64, 0x28, 0x6b, 0xf0,
	0xa6, 0x29, 0x50, 0xb1, 0x09, 0x4b, 0x2b, 0x9d, 0x35, 0xc1, 0x17, 0xf0, 0xd2, 0xd7, 0xf0, 0x61,
	0x7c, 0x28, 0xcf, 0x4c, 0xbb, 0xdd, 0x82, 0x5c, 0xf5, 0xcc, 0xf9, 0xfd, 0xbe, 0xef, 0x9c, 0xc2,
	0x9d, 0x99, 0xc7, 0xb9, 0x1f, 0x7f, 0x0b, 0xa2, 0x4e, 0xb4, 0x09, 0x79, 0x48, 0x40, 0x38, 0x56,
	0xd2, 0x43, 0xdf, 0x83, 0x3a, 0xc6, 0x2f, 0xd1, 0xa0, 0x14, 0x85, 0x71, 0x4b, 0x79, 0xa2, 0x9c,
	0x96, 0x99, 0x30, 0x09, 0x01, 0xf5, 0x87, 0xbf, 0xe1, 0xad, 0x22, 0xba, 0x6a, 0x4c, 0xda, 0xc2,
	0x17, 0x07, 0x3f, 0xfd, 0x56, 0x49, 0xa6, 0x49, 0x9b, 0x3e, 0x84, 0x23, 0x73, 0xf1, 0xc9, 0x8f,
	0x63, 0x6f, 0xe9, 0x93, 0x26, 0x14, 0x83, 0x45, 0xda, 0x05, 0x2d, 0xda, 0x84, 0x86, 0x71, 0x15,
	0xf1, 0x6d, 0x1a, 0xa7, 0x43, 0x68, 0xf6, 0xc3, 0xf5, 0xda, 0x9f, 0x73, 0xe6, 0x7f, 0xbf, 0xf6,
	0x63, 0xd9, 0x72, 0xed, 0x5d, 0xf9, 0xb2, 0xe6, 0x88, 0x49, 0x9b, 0x3c, 0x83, 0xb2, 0x00, 0x17,
	0xe3, 0xec, 0xd2, 0x69, 0x5d, 0xd7, 0x3a, 0xb7, 0x80, 0x3b, 0x02, 0x2d, 0x4b, 0xc2, 0xf4, 0xb7,
	0x02, 0x0d, 0x2b, 0xe4, 0xc1, 0xd7, 0x60, 0xee, 0xf1, 0x20, 0x5c, 0x93, 0x77, 0x70, 0x3c, 0x4f,
	0xda, 0xbb, 0x1b, 0x3f, 0x5a, 0x6d, 0x65, 0xd7, 0xba, 0x7e, 0x92, 0x6f, 0x90, 0x81, 0xbd, 0x28,
	0xb0, 0xc6, 0xfc, 0x06, 0x0c, 0x26, 0x93, 0xb7, 0x50, 0x5f, 0xe2, 0x78, 0x37, 0xe6, 0x1e, 0xbf,
	0x8e, 0x25, 0xf1, 0xba, 0x7e, 0x3f, 0x5f, 0x7b, 0x8e, 0xe1, 0xb1, 0x8c, 0x62, 0x31, 0x2c, 0xb3,
	0x57, 0xaf, 0x02, 0xea, 0x2c, 0x5c, 0x6c, 0xe9, 0x2f, 0x05, 0xe0, 0x36, 0x49, 0x90, 0x8b, 0x56,
	0x5e, 0x02, 0x03, 0x35, 0x14, 0x36, 0x79, 0x0d, 0x95, 0xdc, 0x80, 0xa6, 0xfe, 0xf8, 0xf0, 0x80,
	0x4e, 0xf2, 0x61, 0x69, 0x32, 0xed, 0x40, 0x25, 0x6d, 0x5a, 0x87, 0xea, 0x68, 0xd8, 0x9d, 0x9a,
	0xd6, 0xb9, 0x56, 0x10, 0x8f, 0x4b, 0xb3, 0xef, 0xd8, 0x6c, 0xaa, 0x29, 0x04, 0xa0, 0x32, 0x30,
	0x3e, 0x18, 0x5d, 0x47, 0x2b, 0x52, 0x24, 0x33, 0xc2, 0x71, 0x37, 0x32, 0xef, 0x2d, 0x86, 0xb4,
	0xa1, 0x86, 0x4b, 0x0e, 0x84, 0x6a, 0x12, 0x47, 0x99, 0x65, 0x6f, 0xfa, 0x47, 0x81, 0xa3, 0xa4,
	0x56, 0xa8, 0xf2, 0x14, 0x54, 0x1e, 0xac, 0x92, 0x05, 0x35, 0x77, 0x77, 0xe1, 0xa0, 0x9f, 0xc9,
	0x28, 0x79, 0xb5, 0xc7, 0xea, 0x51, 0x3e, 0x2f, 0x6b, 0xb6, 0x4f, 0xea, 0x2c, 0x23, 0xd5, 0x80,
	0x5a, 0xb7, 0xdf, 0x37, 0x46, 0x8e, 0x31, 0x40, 0x56, 0x77, 0xe1, 0xd8, 0xb2, 0x1d, 0x77, 0x6a,
	0x4f, 0x98, 0xeb, 0x4c, 0x98, 0x85, 0xdc, 0xee, 0x81, 0x66, 0x5a, 0x97, 0xdd, 0xa1, 0x39, 0x70,
	0x47, 0xf6, 0xd8, 0x74, 0x4c, 0xdb, 0xd2, 0x8a, 0xcf, 0x75, 0x50, 0x05, 0x08, 0x21, 0xc3, 0xc4,
	0xfa, 0x68, 0xd9, 0x9f, 0x2d, 0xac, 0xae, 0x42, 0x69, 0x6c, 0x74, 0xb1, 0xa6, 0x86, 0xc7, 0x7d,
	0x61, 0x8e, 0xb4, 0xa2, 0x50, 0x66, 0x8c, 0x09, 0x86, 0xa5, 0x95, 0xf4, 0xbf, 0xb8, 0xa3, 0x5e,
	0x06, 0x8e, 0xf4, 0xa1, 0x9a, 0x9e, 0x24, 0x69, 0xe7, 0x41, 0xef, 0xde, 0x69, 0xbb, 0x95, 0x8f,
	0xe5, 0x8f, 0x8e, 0x16, 0x5e, 0x28, 0xe4, 0x0c, 0x60, 0x10, 0xc4, 0xe9, 0x35, 0x91, 0xc3, 0xf7,
	0xb6, 0xdb, 0x62, 0xe7, 0xb7, 0x28, 0x90, 0x37, 0xa0, 0x0a, 0x95, 0xc8, 0x83, 0xff, 0x75, 0x4b,
	0xe6, 0x9f, 0x1c, 0x14, 0x94, 0x16, 0x7a, 0xd5, 0x2f, 0x65, 0xf9, 0x5b, 0xcf, 0x2a, 0xf2, 0xf3,
	0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0xb6, 0xe5, 0x17, 0xf0, 0x03, 0x00, 0x00,
}
