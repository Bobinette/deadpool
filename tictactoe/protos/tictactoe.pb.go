// Code generated by protoc-gen-go.
// source: tictactoe.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	tictactoe.proto

It has these top-level messages:
	IdMessage
	ConnectRequest
	EmptyMessage
	Notification
	ConnectReply
	GameStatus
	PlayRequest
	PlayReply
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PlayReply_Status int32

const (
	PlayReply_VALID            PlayReply_Status = 0
	PlayReply_WRONG_TURN       PlayReply_Status = 1
	PlayReply_POSITION_TAKEN   PlayReply_Status = 2
	PlayReply_INVALID_POSITION PlayReply_Status = 3
)

var PlayReply_Status_name = map[int32]string{
	0: "VALID",
	1: "WRONG_TURN",
	2: "POSITION_TAKEN",
	3: "INVALID_POSITION",
}
var PlayReply_Status_value = map[string]int32{
	"VALID":            0,
	"WRONG_TURN":       1,
	"POSITION_TAKEN":   2,
	"INVALID_POSITION": 3,
}

func (x PlayReply_Status) String() string {
	return proto.EnumName(PlayReply_Status_name, int32(x))
}
func (PlayReply_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

// ---- Identification message
type IdMessage struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdMessage) Reset()                    { *m = IdMessage{} }
func (m *IdMessage) String() string            { return proto.CompactTextString(m) }
func (*IdMessage) ProtoMessage()               {}
func (*IdMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ---- Connect
type ConnectRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ---- Disconnect
type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// ---- Notification
type Notification struct {
	// Types that are valid to be assigned to Body:
	//	*Notification_ConnectReply
	//	*Notification_GameStatus
	Body isNotification_Body `protobuf_oneof:"body"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isNotification_Body interface {
	isNotification_Body()
}

type Notification_ConnectReply struct {
	ConnectReply *ConnectReply `protobuf:"bytes,1,opt,name=connect_reply,json=connectReply,oneof"`
}
type Notification_GameStatus struct {
	GameStatus *GameStatus `protobuf:"bytes,2,opt,name=game_status,json=gameStatus,oneof"`
}

func (*Notification_ConnectReply) isNotification_Body() {}
func (*Notification_GameStatus) isNotification_Body()   {}

func (m *Notification) GetBody() isNotification_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Notification) GetConnectReply() *ConnectReply {
	if x, ok := m.GetBody().(*Notification_ConnectReply); ok {
		return x.ConnectReply
	}
	return nil
}

func (m *Notification) GetGameStatus() *GameStatus {
	if x, ok := m.GetBody().(*Notification_GameStatus); ok {
		return x.GameStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Notification) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Notification_OneofMarshaler, _Notification_OneofUnmarshaler, _Notification_OneofSizer, []interface{}{
		(*Notification_ConnectReply)(nil),
		(*Notification_GameStatus)(nil),
	}
}

func _Notification_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Notification)
	// body
	switch x := m.Body.(type) {
	case *Notification_ConnectReply:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConnectReply); err != nil {
			return err
		}
	case *Notification_GameStatus:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GameStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Notification.Body has unexpected type %T", x)
	}
	return nil
}

func _Notification_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Notification)
	switch tag {
	case 1: // body.connect_reply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConnectReply)
		err := b.DecodeMessage(msg)
		m.Body = &Notification_ConnectReply{msg}
		return true, err
	case 2: // body.game_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GameStatus)
		err := b.DecodeMessage(msg)
		m.Body = &Notification_GameStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Notification_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Notification)
	// body
	switch x := m.Body.(type) {
	case *Notification_ConnectReply:
		s := proto.Size(x.ConnectReply)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Notification_GameStatus:
		s := proto.Size(x.GameStatus)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ConnectReply struct {
	Id    int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Shape int32 `protobuf:"varint,2,opt,name=shape" json:"shape,omitempty"`
}

func (m *ConnectReply) Reset()                    { *m = ConnectReply{} }
func (m *ConnectReply) String() string            { return proto.CompactTextString(m) }
func (*ConnectReply) ProtoMessage()               {}
func (*ConnectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type GameStatus struct {
	CurrentShape int32   `protobuf:"varint,1,opt,name=current_shape,json=currentShape" json:"current_shape,omitempty"`
	Board        []int32 `protobuf:"varint,2,rep,name=board" json:"board,omitempty"`
	Winner       int32   `protobuf:"varint,3,opt,name=winner" json:"winner,omitempty"`
}

func (m *GameStatus) Reset()                    { *m = GameStatus{} }
func (m *GameStatus) String() string            { return proto.CompactTextString(m) }
func (*GameStatus) ProtoMessage()               {}
func (*GameStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// ---- Play
type PlayRequest struct {
	Id       int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Position int32 `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
}

func (m *PlayRequest) Reset()                    { *m = PlayRequest{} }
func (m *PlayRequest) String() string            { return proto.CompactTextString(m) }
func (*PlayRequest) ProtoMessage()               {}
func (*PlayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type PlayReply struct {
	Status PlayReply_Status `protobuf:"varint,1,opt,name=status,enum=tictactoe.PlayReply_Status" json:"status,omitempty"`
}

func (m *PlayReply) Reset()                    { *m = PlayReply{} }
func (m *PlayReply) String() string            { return proto.CompactTextString(m) }
func (*PlayReply) ProtoMessage()               {}
func (*PlayReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*IdMessage)(nil), "tictactoe.IdMessage")
	proto.RegisterType((*ConnectRequest)(nil), "tictactoe.ConnectRequest")
	proto.RegisterType((*EmptyMessage)(nil), "tictactoe.EmptyMessage")
	proto.RegisterType((*Notification)(nil), "tictactoe.Notification")
	proto.RegisterType((*ConnectReply)(nil), "tictactoe.ConnectReply")
	proto.RegisterType((*GameStatus)(nil), "tictactoe.GameStatus")
	proto.RegisterType((*PlayRequest)(nil), "tictactoe.PlayRequest")
	proto.RegisterType((*PlayReply)(nil), "tictactoe.PlayReply")
	proto.RegisterEnum("tictactoe.PlayReply_Status", PlayReply_Status_name, PlayReply_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for TicTacToe service

type TicTacToeClient interface {
	// Connects to the server to get an id to use in other messages
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (TicTacToe_ConnectClient, error)
	// Disconnect from the server
	Disconnect(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Play
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayReply, error)
	// Request game status
	GetGameStatus(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GameStatus, error)
}

type ticTacToeClient struct {
	cc *grpc.ClientConn
}

func NewTicTacToeClient(cc *grpc.ClientConn) TicTacToeClient {
	return &ticTacToeClient{cc}
}

func (c *ticTacToeClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (TicTacToe_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TicTacToe_serviceDesc.Streams[0], c.cc, "/tictactoe.TicTacToe/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticTacToeConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicTacToe_ConnectClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type ticTacToeConnectClient struct {
	grpc.ClientStream
}

func (x *ticTacToeConnectClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticTacToeClient) Disconnect(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/tictactoe.TicTacToe/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayReply, error) {
	out := new(PlayReply)
	err := grpc.Invoke(ctx, "/tictactoe.TicTacToe/Play", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) GetGameStatus(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GameStatus, error) {
	out := new(GameStatus)
	err := grpc.Invoke(ctx, "/tictactoe.TicTacToe/GetGameStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TicTacToe service

type TicTacToeServer interface {
	// Connects to the server to get an id to use in other messages
	Connect(*ConnectRequest, TicTacToe_ConnectServer) error
	// Disconnect from the server
	Disconnect(context.Context, *IdMessage) (*EmptyMessage, error)
	// Play
	Play(context.Context, *PlayRequest) (*PlayReply, error)
	// Request game status
	GetGameStatus(context.Context, *EmptyMessage) (*GameStatus, error)
}

func RegisterTicTacToeServer(s *grpc.Server, srv TicTacToeServer) {
	s.RegisterService(&_TicTacToe_serviceDesc, srv)
}

func _TicTacToe_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicTacToeServer).Connect(m, &ticTacToeConnectServer{stream})
}

type TicTacToe_ConnectServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type ticTacToeConnectServer struct {
	grpc.ServerStream
}

func (x *ticTacToeConnectServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _TicTacToe_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe.TicTacToe/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).Disconnect(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe.TicTacToe/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_GetGameStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).GetGameStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe.TicTacToe/GetGameStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).GetGameStatus(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TicTacToe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tictactoe.TicTacToe",
	HandlerType: (*TicTacToeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disconnect",
			Handler:    _TicTacToe_Disconnect_Handler,
		},
		{
			MethodName: "Play",
			Handler:    _TicTacToe_Play_Handler,
		},
		{
			MethodName: "GetGameStatus",
			Handler:    _TicTacToe_GetGameStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _TicTacToe_Connect_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xb5, 0xf3, 0x61, 0xea, 0x89, 0x6b, 0xac, 0x55, 0x28, 0x21, 0x3d, 0x80, 0x16, 0x0e, 0x9c,
	0x52, 0x94, 0x22, 0x04, 0x07, 0x90, 0x52, 0x5a, 0x05, 0x0b, 0xea, 0x54, 0x8e, 0x01, 0x89, 0x8b,
	0xe5, 0x38, 0x5b, 0xb3, 0x52, 0xe2, 0x35, 0xf6, 0x46, 0x28, 0xff, 0x80, 0x1b, 0xfc, 0x64, 0xd6,
	0xeb, 0xad, 0xeb, 0x86, 0x70, 0xf2, 0xce, 0xce, 0xbc, 0x37, 0xf3, 0xde, 0x8e, 0xe1, 0x3e, 0xa7,
	0x31, 0x8f, 0x62, 0xce, 0xc8, 0x28, 0xcb, 0x19, 0x67, 0xc8, 0xac, 0x2f, 0x86, 0x8f, 0x13, 0xc6,
	0x92, 0x15, 0x39, 0x91, 0x89, 0xc5, 0xe6, 0xfa, 0x84, 0xd3, 0x35, 0x29, 0x78, 0xb4, 0xce, 0xaa,
	0x5a, 0x7c, 0x0c, 0xa6, 0xbb, 0xbc, 0x24, 0x45, 0x11, 0x25, 0x04, 0xd9, 0xd0, 0xa2, 0xcb, 0x81,
	0xfe, 0x44, 0x7f, 0xde, 0xf5, 0xc5, 0x09, 0x3f, 0x03, 0xfb, 0x3d, 0x4b, 0x53, 0x12, 0x73, 0x9f,
	0xfc, 0xd8, 0x08, 0x1c, 0x42, 0xd0, 0x49, 0xa3, 0x35, 0x91, 0x35, 0xa6, 0x2f, 0xcf, 0xd8, 0x06,
	0xeb, 0x62, 0x9d, 0xf1, 0xad, 0x62, 0xc1, 0x7f, 0x74, 0xb0, 0x3c, 0xc6, 0xe9, 0x35, 0x8d, 0x23,
	0x4e, 0x59, 0x8a, 0xde, 0xc1, 0x61, 0x5c, 0xd1, 0x84, 0x39, 0xc9, 0x56, 0x5b, 0x89, 0xee, 0x8d,
	0x1f, 0x8e, 0x6e, 0x07, 0xaf, 0xdb, 0x88, 0xf4, 0x07, 0xcd, 0xb7, 0xe2, 0x46, 0x8c, 0x5e, 0x43,
	0x2f, 0x11, 0x8d, 0x42, 0x31, 0x37, 0xdf, 0x14, 0x83, 0x96, 0x44, 0x3f, 0x68, 0xa0, 0xa7, 0x22,
	0x3b, 0x97, 0x49, 0x81, 0x85, 0xa4, 0x8e, 0xce, 0x0c, 0xe8, 0x2c, 0xd8, 0x72, 0x8b, 0x5f, 0x82,
	0xd5, 0xec, 0xb0, 0x2b, 0x14, 0xf5, 0xa1, 0x5b, 0x7c, 0x8f, 0x32, 0x22, 0xb9, 0xbb, 0x7e, 0x15,
	0xe0, 0x10, 0xe0, 0x96, 0x19, 0x3d, 0x15, 0x2a, 0x36, 0x79, 0x4e, 0x52, 0x1e, 0x56, 0xb5, 0x15,
	0xdc, 0x52, 0x97, 0xf3, 0xf2, 0xae, 0x24, 0x5a, 0xb0, 0x28, 0x5f, 0x0a, 0xa2, 0x76, 0x49, 0x24,
	0x03, 0x74, 0x04, 0xc6, 0x4f, 0x2a, 0xda, 0xe7, 0x83, 0xb6, 0xc4, 0xa8, 0x08, 0xbf, 0x81, 0xde,
	0xd5, 0x2a, 0xda, 0xde, 0x98, 0xbb, 0x3b, 0xd5, 0x10, 0x0e, 0x32, 0x56, 0xd0, 0xd2, 0x43, 0x35,
	0x58, 0x1d, 0xe3, 0xdf, 0x3a, 0x98, 0x15, 0xb6, 0xd4, 0x73, 0x0a, 0x86, 0x32, 0xa7, 0x44, 0xdb,
	0xe3, 0xe3, 0x86, 0x39, 0x75, 0xd5, 0xa8, 0x12, 0xe2, 0xab, 0x52, 0x7c, 0x09, 0x86, 0x92, 0x66,
	0x42, 0xf7, 0xcb, 0xe4, 0x93, 0x7b, 0xee, 0x68, 0x62, 0x06, 0xf8, 0xea, 0xcf, 0xbc, 0x69, 0x18,
	0x7c, 0xf6, 0x3d, 0x47, 0x17, 0x0f, 0x6e, 0x5f, 0xcd, 0xe6, 0x6e, 0xe0, 0xce, 0xbc, 0x30, 0x98,
	0x7c, 0xbc, 0xf0, 0x9c, 0x96, 0x10, 0xe9, 0xb8, 0x9e, 0x04, 0x84, 0x37, 0x39, 0xa7, 0x3d, 0xfe,
	0xd5, 0x02, 0x33, 0xa0, 0x71, 0x10, 0xc5, 0x01, 0x23, 0x68, 0x02, 0xf7, 0x94, 0xe3, 0xe8, 0xd1,
	0xbe, 0x77, 0x96, 0x8a, 0x87, 0xcd, 0x15, 0x68, 0xae, 0x0c, 0xd6, 0x5e, 0xe8, 0xe8, 0x2d, 0xc0,
	0x39, 0x2d, 0xd4, 0x26, 0xa0, 0x7e, 0xa3, 0xb4, 0xde, 0xd8, 0x3b, 0x04, 0x77, 0x96, 0x50, 0x43,
	0xaf, 0xa0, 0x53, 0x4a, 0x47, 0x47, 0xff, 0x78, 0x51, 0xf5, 0xee, 0xef, 0xf3, 0x48, 0xe0, 0x26,
	0x70, 0x38, 0x25, 0xbc, 0xf1, 0xf0, 0xff, 0xeb, 0x31, 0xdc, 0xbf, 0x82, 0x58, 0x3b, 0x3b, 0xf8,
	0x66, 0xc8, 0xbf, 0xab, 0x58, 0x54, 0xdf, 0xd3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x2a,
	0x9e, 0xb4, 0xa4, 0x03, 0x00, 0x00,
}
