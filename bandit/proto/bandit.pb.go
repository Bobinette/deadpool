// Code generated by protoc-gen-go.
// source: bandit.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	bandit.proto

It has these top-level messages:
	EmptyMessage
	Notification
	ConnectReply
	PlayRequest
	PlayReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

// ---- Empty
type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto1.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ---- Notifications
type Notification struct {
	// Types that are valid to be assigned to Msg:
	//	*Notification_ConnectReply
	Msg isNotification_Msg `protobuf_oneof:"msg"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto1.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isNotification_Msg interface {
	isNotification_Msg()
}

type Notification_ConnectReply struct {
	ConnectReply *ConnectReply `protobuf:"bytes,1,opt,name=connect_reply,json=connectReply,oneof"`
}

func (*Notification_ConnectReply) isNotification_Msg() {}

func (m *Notification) GetMsg() isNotification_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Notification) GetConnectReply() *ConnectReply {
	if x, ok := m.GetMsg().(*Notification_ConnectReply); ok {
		return x.ConnectReply
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Notification) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Notification_OneofMarshaler, _Notification_OneofUnmarshaler, _Notification_OneofSizer, []interface{}{
		(*Notification_ConnectReply)(nil),
	}
}

func _Notification_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Notification)
	// msg
	switch x := m.Msg.(type) {
	case *Notification_ConnectReply:
		b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.ConnectReply); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Notification.Msg has unexpected type %T", x)
	}
	return nil
}

func _Notification_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Notification)
	switch tag {
	case 1: // msg.connect_reply
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(ConnectReply)
		err := b.DecodeMessage(msg)
		m.Msg = &Notification_ConnectReply{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Notification_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Notification)
	// msg
	switch x := m.Msg.(type) {
	case *Notification_ConnectReply:
		s := proto1.Size(x.ConnectReply)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ConnectReply struct {
	// The number of arms the bandit has in this game
	NArms int32 `protobuf:"varint,2,opt,name=n_arms,json=nArms" json:"n_arms,omitempty"`
}

func (m *ConnectReply) Reset()                    { *m = ConnectReply{} }
func (m *ConnectReply) String() string            { return proto1.CompactTextString(m) }
func (*ConnectReply) ProtoMessage()               {}
func (*ConnectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// ---- Play
type PlayRequest struct {
	Arm int32 `protobuf:"varint,2,opt,name=arm" json:"arm,omitempty"`
}

func (m *PlayRequest) Reset()                    { *m = PlayRequest{} }
func (m *PlayRequest) String() string            { return proto1.CompactTextString(m) }
func (*PlayRequest) ProtoMessage()               {}
func (*PlayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PlayReply struct {
	Valid bool    `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *PlayReply) Reset()                    { *m = PlayReply{} }
func (m *PlayReply) String() string            { return proto1.CompactTextString(m) }
func (*PlayReply) ProtoMessage()               {}
func (*PlayReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto1.RegisterType((*EmptyMessage)(nil), "bandit.EmptyMessage")
	proto1.RegisterType((*Notification)(nil), "bandit.Notification")
	proto1.RegisterType((*ConnectReply)(nil), "bandit.ConnectReply")
	proto1.RegisterType((*PlayRequest)(nil), "bandit.PlayRequest")
	proto1.RegisterType((*PlayReply)(nil), "bandit.PlayReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Bandit service

type BanditClient interface {
	// Connects to the server to get an id to use in other messages
	Connect(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Bandit_ConnectClient, error)
	// Disconnect from the server
	Disconnect(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Play
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayReply, error)
}

type banditClient struct {
	cc *grpc.ClientConn
}

func NewBanditClient(cc *grpc.ClientConn) BanditClient {
	return &banditClient{cc}
}

func (c *banditClient) Connect(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Bandit_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bandit_serviceDesc.Streams[0], c.cc, "/bandit.Bandit/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &banditConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bandit_ConnectClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type banditConnectClient struct {
	grpc.ClientStream
}

func (x *banditConnectClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *banditClient) Disconnect(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/bandit.Bandit/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banditClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayReply, error) {
	out := new(PlayReply)
	err := grpc.Invoke(ctx, "/bandit.Bandit/Play", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bandit service

type BanditServer interface {
	// Connects to the server to get an id to use in other messages
	Connect(*EmptyMessage, Bandit_ConnectServer) error
	// Disconnect from the server
	Disconnect(context.Context, *EmptyMessage) (*EmptyMessage, error)
	// Play
	Play(context.Context, *PlayRequest) (*PlayReply, error)
}

func RegisterBanditServer(s *grpc.Server, srv BanditServer) {
	s.RegisterService(&_Bandit_serviceDesc, srv)
}

func _Bandit_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BanditServer).Connect(m, &banditConnectServer{stream})
}

type Bandit_ConnectServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type banditConnectServer struct {
	grpc.ServerStream
}

func (x *banditConnectServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Bandit_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanditServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandit.Bandit/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanditServer).Disconnect(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bandit_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanditServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandit.Bandit/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanditServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bandit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bandit.Bandit",
	HandlerType: (*BanditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disconnect",
			Handler:    _Bandit_Disconnect_Handler,
		},
		{
			MethodName: "Play",
			Handler:    _Bandit_Play_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Bandit_Connect_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x51, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x6d, 0x9d, 0xed, 0xf4, 0x5b, 0x14, 0x8d, 0x13, 0xc6, 0x2e, 0x4a, 0x40, 0xf0, 0x34, 0xc6,
	0x3c, 0x88, 0x7a, 0xb2, 0x2a, 0x78, 0x51, 0x24, 0x47, 0x2f, 0x23, 0xcb, 0xe2, 0x08, 0xb4, 0x49,
	0x6d, 0x32, 0xa1, 0x3f, 0xcb, 0x7f, 0x68, 0x9b, 0xd4, 0x91, 0xdd, 0x76, 0x6a, 0xdf, 0xf7, 0xbd,
	0xef, 0xf1, 0xde, 0x0b, 0xa0, 0x05, 0x53, 0x4b, 0x69, 0x27, 0x65, 0xa5, 0xad, 0xc6, 0xa9, 0x47,
	0xe4, 0x18, 0xd0, 0x4b, 0x51, 0xda, 0xfa, 0x4d, 0x18, 0xc3, 0x56, 0x82, 0x50, 0x40, 0xef, 0xda,
	0xca, 0x2f, 0xc9, 0x99, 0x95, 0x5a, 0xe1, 0x07, 0x38, 0xe2, 0x5a, 0x29, 0xc1, 0xed, 0xbc, 0x12,
	0x65, 0x5e, 0x8f, 0xe2, 0xcb, 0xf8, 0x7a, 0x30, 0x1b, 0x4e, 0x3a, 0xb5, 0x27, 0xbf, 0xa4, 0xed,
	0xee, 0x35, 0xa2, 0x88, 0x07, 0x38, 0x4b, 0xa0, 0x57, 0x98, 0x15, 0xb9, 0x02, 0x14, 0xd2, 0xf0,
	0x39, 0xa4, 0x6a, 0xce, 0xaa, 0xc2, 0x8c, 0xf6, 0x1a, 0xb1, 0x84, 0x26, 0xea, 0xb1, 0x01, 0xe4,
	0x02, 0x06, 0x1f, 0x39, 0xab, 0xa9, 0xf8, 0x5e, 0x0b, 0x63, 0xf1, 0x09, 0xf4, 0x1a, 0x4e, 0x47,
	0x69, 0x7f, 0xc9, 0x2d, 0x1c, 0x7a, 0x42, 0x2b, 0x32, 0x84, 0xe4, 0x87, 0xe5, 0x72, 0xe9, 0x0c,
	0x1d, 0x50, 0x0f, 0xba, 0xe9, 0x5a, 0xb8, 0xb3, 0x98, 0x7a, 0x30, 0xfb, 0x8d, 0x21, 0xcd, 0x9c,
	0x5f, 0x7c, 0x07, 0xfd, 0xce, 0x0b, 0xde, 0x64, 0x08, 0x0b, 0x18, 0x6f, 0xa6, 0x61, 0x0d, 0x24,
	0x9a, 0xc6, 0xf8, 0x1e, 0xe0, 0x59, 0x1a, 0xbe, 0xdb, 0xf5, 0x56, 0xa9, 0x11, 0x9e, 0xc2, 0x7e,
	0x6b, 0x1d, 0x9f, 0xfd, 0xef, 0x83, 0xa4, 0xe3, 0xd3, 0xed, 0x61, 0x93, 0x8e, 0x44, 0x59, 0xff,
	0x33, 0x71, 0x2f, 0xb5, 0x48, 0xdd, 0xe7, 0xe6, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x2b, 0x7c,
	0x47, 0xc0, 0x01, 0x00, 0x00,
}
